import { IonicNativePlugin } from '@ionic-native/core';
import * as ɵngcc0 from '@angular/core';
export interface StripeCardTokenParams {
    /**
     * Card number
     */
    number: string;
    /**
     * Expiry month
     */
    expMonth: number;
    /**
     * Expiry year
     */
    expYear: number;
    /**
     * CVC / CVV
     */
    cvc?: string;
    /**
     * Cardholder name
     */
    name?: string;
    /**
     * Address line 1
     */
    address_line1?: string;
    /**
     * Address line 2
     */
    address_line2?: string;
    /**
     * City
     */
    address_city?: string;
    /**
     * State / Province
     */
    address_state?: string;
    /**
     * Country
     */
    address_country?: string;
    /**
     * Postal code / ZIP Code
     */
    postalCode?: string;
    /**
     * 3-letter ISO code for currency
     */
    currency?: string;
}
export interface StripeBankAccountParams {
    /**
     * Routing number.
     */
    routing_number: string;
    /**
     * Account number.
     */
    account_number: string;
    /**
     * Currency code. Example: `USD`.
     */
    currency: string;
    /**
     * Country code. Example: `US`.
     */
    country: string;
    /**
     * Account holder name.
     */
    account_holder_name?: string;
    /**
     * Account holder type. This can be `individual` or `company`.
     */
    account_holder_type?: string;
}
export interface StripeCardTokenRes {
    /**
     * Card Object.
     */
    card: {
        brand: string;
        exp_month: number;
        exp_year: number;
        funding: string;
        last4: string;
    };
    /**
     * Token Request Date Time.
     */
    created: string;
    /**
     * Card Token.
     */
    id: string;
    /**
     * Source Type (card or account).
     */
    type: string;
}
/**
 * @name Stripe
 * @description
 * A plugin that allows you to use Stripe's Native SDKs for Android and iOS.
 *
 * @usage
 * ```typescript
 * import { Stripe } from '@ionic-native/stripe/ngx';
 *
 * constructor(private stripe: Stripe) { }
 *
 * ...
 *
 * this.stripe.setPublishableKey('my_publishable_key');
 *
 * let card = {
 *  number: '4242424242424242',
 *  expMonth: 12,
 *  expYear: 2020,
 *  cvc: '220'
 * }
 *
 * this.stripe.createCardToken(card)
 *    .then(token => console.log(token.id))
 *    .catch(error => console.error(error));
 *
 * ```
 *
 * @interfaces
 * StripeCardTokenParams
 */
export declare class Stripe extends IonicNativePlugin {
    /**
     * Set publishable key
     * @param publishableKey {string} Publishable key
     * @return {Promise<void>}
     */
    setPublishableKey(publishableKey: string): Promise<void>;
    /**
     * Create Credit Card Token
     * @param params {StripeCardTokenParams} Credit card information
     * @return {Promise<StripeCardTokenRes>} returns a promise that resolves with the token object, or rejects with an error
     */
    createCardToken(params: StripeCardTokenParams): Promise<StripeCardTokenRes>;
    /**
     * Create a bank account token
     * @param params {StripeBankAccountParams} Bank account information
     * @return {Promise<string>} returns a promise that resolves with the token, or rejects with an error
     */
    createBankAccountToken(params: StripeBankAccountParams): Promise<string>;
    /**
     * Validates a credit card number
     * @param cardNumber {string} Credit card number
     * @return {Promise<any>} returns a promise that resolves if the number is valid, and rejects if it's invalid
     */
    validateCardNumber(cardNumber: string): Promise<any>;
    /**
     * Validates a CVC number
     * @param cvc {string} CVC number
     * @return {Promise<any>} returns a promise that resolves if the number is valid, and rejects if it's invalid
     */
    validateCVC(cvc: string): Promise<any>;
    /**
     * Validates an expiry date
     * @param expMonth {string} expiry month (0 - 11)
     * @param expYear {string} expiry year
     * @return {Promise<any>} returns a promise that resolves if the date is valid, and rejects if it's invalid
     */
    validateExpiryDate(expMonth: string, expYear: string): Promise<any>;
    /**
     * Get a card type from card number
     * @param cardNumber {string} Card number
     * @return {Promise<string>} returns a promise that resolves with the credit card type
     */
    getCardType(cardNumber: string): Promise<string>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Stripe, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<Stripe>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguZC50cyIsInNvdXJjZXMiOlsiaW5kZXguZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJb25pY05hdGl2ZVBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XG5leHBvcnQgaW50ZXJmYWNlIFN0cmlwZUNhcmRUb2tlblBhcmFtcyB7XG4gICAgLyoqXG4gICAgICogQ2FyZCBudW1iZXJcbiAgICAgKi9cbiAgICBudW1iZXI6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBFeHBpcnkgbW9udGhcbiAgICAgKi9cbiAgICBleHBNb250aDogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIEV4cGlyeSB5ZWFyXG4gICAgICovXG4gICAgZXhwWWVhcjogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIENWQyAvIENWVlxuICAgICAqL1xuICAgIGN2Yz86IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBDYXJkaG9sZGVyIG5hbWVcbiAgICAgKi9cbiAgICBuYW1lPzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEFkZHJlc3MgbGluZSAxXG4gICAgICovXG4gICAgYWRkcmVzc19saW5lMT86IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBBZGRyZXNzIGxpbmUgMlxuICAgICAqL1xuICAgIGFkZHJlc3NfbGluZTI/OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQ2l0eVxuICAgICAqL1xuICAgIGFkZHJlc3NfY2l0eT86IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBTdGF0ZSAvIFByb3ZpbmNlXG4gICAgICovXG4gICAgYWRkcmVzc19zdGF0ZT86IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBDb3VudHJ5XG4gICAgICovXG4gICAgYWRkcmVzc19jb3VudHJ5Pzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFBvc3RhbCBjb2RlIC8gWklQIENvZGVcbiAgICAgKi9cbiAgICBwb3N0YWxDb2RlPzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIDMtbGV0dGVyIElTTyBjb2RlIGZvciBjdXJyZW5jeVxuICAgICAqL1xuICAgIGN1cnJlbmN5Pzogc3RyaW5nO1xufVxuZXhwb3J0IGludGVyZmFjZSBTdHJpcGVCYW5rQWNjb3VudFBhcmFtcyB7XG4gICAgLyoqXG4gICAgICogUm91dGluZyBudW1iZXIuXG4gICAgICovXG4gICAgcm91dGluZ19udW1iZXI6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBBY2NvdW50IG51bWJlci5cbiAgICAgKi9cbiAgICBhY2NvdW50X251bWJlcjogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEN1cnJlbmN5IGNvZGUuIEV4YW1wbGU6IGBVU0RgLlxuICAgICAqL1xuICAgIGN1cnJlbmN5OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQ291bnRyeSBjb2RlLiBFeGFtcGxlOiBgVVNgLlxuICAgICAqL1xuICAgIGNvdW50cnk6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBBY2NvdW50IGhvbGRlciBuYW1lLlxuICAgICAqL1xuICAgIGFjY291bnRfaG9sZGVyX25hbWU/OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQWNjb3VudCBob2xkZXIgdHlwZS4gVGhpcyBjYW4gYmUgYGluZGl2aWR1YWxgIG9yIGBjb21wYW55YC5cbiAgICAgKi9cbiAgICBhY2NvdW50X2hvbGRlcl90eXBlPzogc3RyaW5nO1xufVxuZXhwb3J0IGludGVyZmFjZSBTdHJpcGVDYXJkVG9rZW5SZXMge1xuICAgIC8qKlxuICAgICAqIENhcmQgT2JqZWN0LlxuICAgICAqL1xuICAgIGNhcmQ6IHtcbiAgICAgICAgYnJhbmQ6IHN0cmluZztcbiAgICAgICAgZXhwX21vbnRoOiBudW1iZXI7XG4gICAgICAgIGV4cF95ZWFyOiBudW1iZXI7XG4gICAgICAgIGZ1bmRpbmc6IHN0cmluZztcbiAgICAgICAgbGFzdDQ6IHN0cmluZztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFRva2VuIFJlcXVlc3QgRGF0ZSBUaW1lLlxuICAgICAqL1xuICAgIGNyZWF0ZWQ6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBDYXJkIFRva2VuLlxuICAgICAqL1xuICAgIGlkOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogU291cmNlIFR5cGUgKGNhcmQgb3IgYWNjb3VudCkuXG4gICAgICovXG4gICAgdHlwZTogc3RyaW5nO1xufVxuLyoqXG4gKiBAbmFtZSBTdHJpcGVcbiAqIEBkZXNjcmlwdGlvblxuICogQSBwbHVnaW4gdGhhdCBhbGxvd3MgeW91IHRvIHVzZSBTdHJpcGUncyBOYXRpdmUgU0RLcyBmb3IgQW5kcm9pZCBhbmQgaU9TLlxuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgU3RyaXBlIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9zdHJpcGUvbmd4JztcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIHN0cmlwZTogU3RyaXBlKSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKiB0aGlzLnN0cmlwZS5zZXRQdWJsaXNoYWJsZUtleSgnbXlfcHVibGlzaGFibGVfa2V5Jyk7XG4gKlxuICogbGV0IGNhcmQgPSB7XG4gKiAgbnVtYmVyOiAnNDI0MjQyNDI0MjQyNDI0MicsXG4gKiAgZXhwTW9udGg6IDEyLFxuICogIGV4cFllYXI6IDIwMjAsXG4gKiAgY3ZjOiAnMjIwJ1xuICogfVxuICpcbiAqIHRoaXMuc3RyaXBlLmNyZWF0ZUNhcmRUb2tlbihjYXJkKVxuICogICAgLnRoZW4odG9rZW4gPT4gY29uc29sZS5sb2codG9rZW4uaWQpKVxuICogICAgLmNhdGNoKGVycm9yID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcbiAqXG4gKiBgYGBcbiAqXG4gKiBAaW50ZXJmYWNlc1xuICogU3RyaXBlQ2FyZFRva2VuUGFyYW1zXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFN0cmlwZSBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcbiAgICAvKipcbiAgICAgKiBTZXQgcHVibGlzaGFibGUga2V5XG4gICAgICogQHBhcmFtIHB1Ymxpc2hhYmxlS2V5IHtzdHJpbmd9IFB1Ymxpc2hhYmxlIGtleVxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8dm9pZD59XG4gICAgICovXG4gICAgc2V0UHVibGlzaGFibGVLZXkocHVibGlzaGFibGVLZXk6IHN0cmluZyk6IFByb21pc2U8dm9pZD47XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIENyZWRpdCBDYXJkIFRva2VuXG4gICAgICogQHBhcmFtIHBhcmFtcyB7U3RyaXBlQ2FyZFRva2VuUGFyYW1zfSBDcmVkaXQgY2FyZCBpbmZvcm1hdGlvblxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8U3RyaXBlQ2FyZFRva2VuUmVzPn0gcmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSB0b2tlbiBvYmplY3QsIG9yIHJlamVjdHMgd2l0aCBhbiBlcnJvclxuICAgICAqL1xuICAgIGNyZWF0ZUNhcmRUb2tlbihwYXJhbXM6IFN0cmlwZUNhcmRUb2tlblBhcmFtcyk6IFByb21pc2U8U3RyaXBlQ2FyZFRva2VuUmVzPjtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBiYW5rIGFjY291bnQgdG9rZW5cbiAgICAgKiBAcGFyYW0gcGFyYW1zIHtTdHJpcGVCYW5rQWNjb3VudFBhcmFtc30gQmFuayBhY2NvdW50IGluZm9ybWF0aW9uXG4gICAgICogQHJldHVybiB7UHJvbWlzZTxzdHJpbmc+fSByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIHRva2VuLCBvciByZWplY3RzIHdpdGggYW4gZXJyb3JcbiAgICAgKi9cbiAgICBjcmVhdGVCYW5rQWNjb3VudFRva2VuKHBhcmFtczogU3RyaXBlQmFua0FjY291bnRQYXJhbXMpOiBQcm9taXNlPHN0cmluZz47XG4gICAgLyoqXG4gICAgICogVmFsaWRhdGVzIGEgY3JlZGl0IGNhcmQgbnVtYmVyXG4gICAgICogQHBhcmFtIGNhcmROdW1iZXIge3N0cmluZ30gQ3JlZGl0IGNhcmQgbnVtYmVyXG4gICAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIGlmIHRoZSBudW1iZXIgaXMgdmFsaWQsIGFuZCByZWplY3RzIGlmIGl0J3MgaW52YWxpZFxuICAgICAqL1xuICAgIHZhbGlkYXRlQ2FyZE51bWJlcihjYXJkTnVtYmVyOiBzdHJpbmcpOiBQcm9taXNlPGFueT47XG4gICAgLyoqXG4gICAgICogVmFsaWRhdGVzIGEgQ1ZDIG51bWJlclxuICAgICAqIEBwYXJhbSBjdmMge3N0cmluZ30gQ1ZDIG51bWJlclxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gcmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyBpZiB0aGUgbnVtYmVyIGlzIHZhbGlkLCBhbmQgcmVqZWN0cyBpZiBpdCdzIGludmFsaWRcbiAgICAgKi9cbiAgICB2YWxpZGF0ZUNWQyhjdmM6IHN0cmluZyk6IFByb21pc2U8YW55PjtcbiAgICAvKipcbiAgICAgKiBWYWxpZGF0ZXMgYW4gZXhwaXJ5IGRhdGVcbiAgICAgKiBAcGFyYW0gZXhwTW9udGgge3N0cmluZ30gZXhwaXJ5IG1vbnRoICgwIC0gMTEpXG4gICAgICogQHBhcmFtIGV4cFllYXIge3N0cmluZ30gZXhwaXJ5IHllYXJcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IHJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgaWYgdGhlIGRhdGUgaXMgdmFsaWQsIGFuZCByZWplY3RzIGlmIGl0J3MgaW52YWxpZFxuICAgICAqL1xuICAgIHZhbGlkYXRlRXhwaXJ5RGF0ZShleHBNb250aDogc3RyaW5nLCBleHBZZWFyOiBzdHJpbmcpOiBQcm9taXNlPGFueT47XG4gICAgLyoqXG4gICAgICogR2V0IGEgY2FyZCB0eXBlIGZyb20gY2FyZCBudW1iZXJcbiAgICAgKiBAcGFyYW0gY2FyZE51bWJlciB7c3RyaW5nfSBDYXJkIG51bWJlclxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8c3RyaW5nPn0gcmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSBjcmVkaXQgY2FyZCB0eXBlXG4gICAgICovXG4gICAgZ2V0Q2FyZFR5cGUoY2FyZE51bWJlcjogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+O1xufVxuIl19