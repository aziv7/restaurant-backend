import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import * as ɵngcc0 from '@angular/core';
var Stripe = /** @class */ (function (_super) {
    __extends(Stripe, _super);
    function Stripe() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Stripe.prototype.setPublishableKey = function (publishableKey) { return cordova(this, "setPublishableKey", {}, arguments); };
    Stripe.prototype.createCardToken = function (params) { return cordova(this, "createCardToken", {}, arguments); };
    Stripe.prototype.createBankAccountToken = function (params) { return cordova(this, "createBankAccountToken", {}, arguments); };
    Stripe.prototype.validateCardNumber = function (cardNumber) { return cordova(this, "validateCardNumber", {}, arguments); };
    Stripe.prototype.validateCVC = function (cvc) { return cordova(this, "validateCVC", {}, arguments); };
    Stripe.prototype.validateExpiryDate = function (expMonth, expYear) { return cordova(this, "validateExpiryDate", {}, arguments); };
    Stripe.prototype.getCardType = function (cardNumber) { return cordova(this, "getCardType", {}, arguments); };
    Stripe.pluginName = "Stripe";
    Stripe.plugin = "cordova-plugin-stripe";
    Stripe.pluginRef = "cordova.plugins.stripe";
    Stripe.repo = "https://github.com/zyramedia/cordova-plugin-stripe";
    Stripe.platforms = ["Android", "Browser", "iOS"];
Stripe.ɵfac = function Stripe_Factory(t) { return ɵStripe_BaseFactory(t || Stripe); };
Stripe.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: Stripe, factory: function (t) { return Stripe.ɵfac(t); } });
var ɵStripe_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(Stripe);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Stripe, [{
        type: Injectable
    }], null, null); })();
    return Stripe;
}(IonicNativePlugin));
export { Stripe };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9AaW9uaWMtbmF0aXZlL3BsdWdpbnMvc3RyaXBlL25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLDhCQUFzQyxNQUFNLG9CQUFvQixDQUFDOztBQUN4RTtBQUdBLElBNEk0QiwwQkFBaUI7QUFBQztBQUU5QjtBQUVKO0FBQU0sSUFHaEIsa0NBQWlCLGFBQUMsY0FBc0I7QUFLbkIsSUFLckIsZ0NBQWUsYUFBQyxNQUE2QjtBQUt4QyxJQUtMLHVDQUFzQixhQUFDLE1BQStCO0FBSzlCLElBS3hCLG1DQUFrQixhQUFDLFVBQWtCO0FBS2QsSUFLdkIsNEJBQVcsYUFBQyxHQUFXO0FBS1AsSUFNaEIsbUNBQWtCLGFBQUMsUUFBZ0IsRUFBRSxPQUFlO0FBSzdCLElBS3ZCLDRCQUFXLGFBQUMsVUFBa0I7QUFJWjtBQUFrQztBQUE2QztBQUFpRDtBQUF3RTswQ0F6RTNOLFVBQVU7Ozs7OzBCQUNMO0FBQUMsaUJBakpQO0FBQUUsRUFpSjBCLGlCQUFpQjtBQUM1QyxTQURZLE1BQU07QUFBSSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFN0cmlwZUNhcmRUb2tlblBhcmFtcyB7XG4gIC8qKlxuICAgKiBDYXJkIG51bWJlclxuICAgKi9cbiAgbnVtYmVyOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBFeHBpcnkgbW9udGhcbiAgICovXG4gIGV4cE1vbnRoOiBudW1iZXI7XG4gIC8qKlxuICAgKiBFeHBpcnkgeWVhclxuICAgKi9cbiAgZXhwWWVhcjogbnVtYmVyO1xuICAvKipcbiAgICogQ1ZDIC8gQ1ZWXG4gICAqL1xuICBjdmM/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBDYXJkaG9sZGVyIG5hbWVcbiAgICovXG4gIG5hbWU/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBBZGRyZXNzIGxpbmUgMVxuICAgKi9cbiAgYWRkcmVzc19saW5lMT86IHN0cmluZztcbiAgLyoqXG4gICAqIEFkZHJlc3MgbGluZSAyXG4gICAqL1xuICBhZGRyZXNzX2xpbmUyPzogc3RyaW5nO1xuICAvKipcbiAgICogQ2l0eVxuICAgKi9cbiAgYWRkcmVzc19jaXR5Pzogc3RyaW5nO1xuICAvKipcbiAgICogU3RhdGUgLyBQcm92aW5jZVxuICAgKi9cbiAgYWRkcmVzc19zdGF0ZT86IHN0cmluZztcbiAgLyoqXG4gICAqIENvdW50cnlcbiAgICovXG4gIGFkZHJlc3NfY291bnRyeT86IHN0cmluZztcbiAgLyoqXG4gICAqIFBvc3RhbCBjb2RlIC8gWklQIENvZGVcbiAgICovXG4gIHBvc3RhbENvZGU/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiAzLWxldHRlciBJU08gY29kZSBmb3IgY3VycmVuY3lcbiAgICovXG4gIGN1cnJlbmN5Pzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFN0cmlwZUJhbmtBY2NvdW50UGFyYW1zIHtcbiAgLyoqXG4gICAqIFJvdXRpbmcgbnVtYmVyLlxuICAgKi9cbiAgcm91dGluZ19udW1iZXI6IHN0cmluZztcbiAgLyoqXG4gICAqIEFjY291bnQgbnVtYmVyLlxuICAgKi9cbiAgYWNjb3VudF9udW1iZXI6IHN0cmluZztcbiAgLyoqXG4gICAqIEN1cnJlbmN5IGNvZGUuIEV4YW1wbGU6IGBVU0RgLlxuICAgKi9cbiAgY3VycmVuY3k6IHN0cmluZztcbiAgLyoqXG4gICAqIENvdW50cnkgY29kZS4gRXhhbXBsZTogYFVTYC5cbiAgICovXG4gIGNvdW50cnk6IHN0cmluZztcbiAgLyoqXG4gICAqIEFjY291bnQgaG9sZGVyIG5hbWUuXG4gICAqL1xuICBhY2NvdW50X2hvbGRlcl9uYW1lPzogc3RyaW5nO1xuICAvKipcbiAgICogQWNjb3VudCBob2xkZXIgdHlwZS4gVGhpcyBjYW4gYmUgYGluZGl2aWR1YWxgIG9yIGBjb21wYW55YC5cbiAgICovXG4gIGFjY291bnRfaG9sZGVyX3R5cGU/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3RyaXBlQ2FyZFRva2VuUmVzIHtcbiAgLyoqXG4gICAqIENhcmQgT2JqZWN0LlxuICAgKi9cbiAgY2FyZDoge1xuICAgIGJyYW5kOiBzdHJpbmc7XG4gICAgZXhwX21vbnRoOiBudW1iZXI7XG4gICAgZXhwX3llYXI6IG51bWJlcjtcbiAgICBmdW5kaW5nOiBzdHJpbmc7XG4gICAgbGFzdDQ6IHN0cmluZztcbiAgfTtcbiAgLyoqXG4gICAqIFRva2VuIFJlcXVlc3QgRGF0ZSBUaW1lLlxuICAgKi9cbiAgY3JlYXRlZDogc3RyaW5nO1xuICAvKipcbiAgICogQ2FyZCBUb2tlbi5cbiAgICovXG4gIGlkOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBTb3VyY2UgVHlwZSAoY2FyZCBvciBhY2NvdW50KS5cbiAgICovXG4gIHR5cGU6IHN0cmluZztcbn1cblxuLyoqXG4gKiBAbmFtZSBTdHJpcGVcbiAqIEBkZXNjcmlwdGlvblxuICogQSBwbHVnaW4gdGhhdCBhbGxvd3MgeW91IHRvIHVzZSBTdHJpcGUncyBOYXRpdmUgU0RLcyBmb3IgQW5kcm9pZCBhbmQgaU9TLlxuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgU3RyaXBlIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9zdHJpcGUvbmd4JztcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIHN0cmlwZTogU3RyaXBlKSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKiB0aGlzLnN0cmlwZS5zZXRQdWJsaXNoYWJsZUtleSgnbXlfcHVibGlzaGFibGVfa2V5Jyk7XG4gKlxuICogbGV0IGNhcmQgPSB7XG4gKiAgbnVtYmVyOiAnNDI0MjQyNDI0MjQyNDI0MicsXG4gKiAgZXhwTW9udGg6IDEyLFxuICogIGV4cFllYXI6IDIwMjAsXG4gKiAgY3ZjOiAnMjIwJ1xuICogfVxuICpcbiAqIHRoaXMuc3RyaXBlLmNyZWF0ZUNhcmRUb2tlbihjYXJkKVxuICogICAgLnRoZW4odG9rZW4gPT4gY29uc29sZS5sb2codG9rZW4uaWQpKVxuICogICAgLmNhdGNoKGVycm9yID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcbiAqXG4gKiBgYGBcbiAqXG4gKiBAaW50ZXJmYWNlc1xuICogU3RyaXBlQ2FyZFRva2VuUGFyYW1zXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnU3RyaXBlJyxcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tc3RyaXBlJyxcbiAgcGx1Z2luUmVmOiAnY29yZG92YS5wbHVnaW5zLnN0cmlwZScsXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20venlyYW1lZGlhL2NvcmRvdmEtcGx1Z2luLXN0cmlwZScsXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ0Jyb3dzZXInLCAnaU9TJ10sXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFN0cmlwZSBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcbiAgLyoqXG4gICAqIFNldCBwdWJsaXNoYWJsZSBrZXlcbiAgICogQHBhcmFtIHB1Ymxpc2hhYmxlS2V5IHtzdHJpbmd9IFB1Ymxpc2hhYmxlIGtleVxuICAgKiBAcmV0dXJuIHtQcm9taXNlPHZvaWQ+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzZXRQdWJsaXNoYWJsZUtleShwdWJsaXNoYWJsZUtleTogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBDcmVkaXQgQ2FyZCBUb2tlblxuICAgKiBAcGFyYW0gcGFyYW1zIHtTdHJpcGVDYXJkVG9rZW5QYXJhbXN9IENyZWRpdCBjYXJkIGluZm9ybWF0aW9uXG4gICAqIEByZXR1cm4ge1Byb21pc2U8U3RyaXBlQ2FyZFRva2VuUmVzPn0gcmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSB0b2tlbiBvYmplY3QsIG9yIHJlamVjdHMgd2l0aCBhbiBlcnJvclxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBjcmVhdGVDYXJkVG9rZW4ocGFyYW1zOiBTdHJpcGVDYXJkVG9rZW5QYXJhbXMpOiBQcm9taXNlPFN0cmlwZUNhcmRUb2tlblJlcz4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBiYW5rIGFjY291bnQgdG9rZW5cbiAgICogQHBhcmFtIHBhcmFtcyB7U3RyaXBlQmFua0FjY291bnRQYXJhbXN9IEJhbmsgYWNjb3VudCBpbmZvcm1hdGlvblxuICAgKiBAcmV0dXJuIHtQcm9taXNlPHN0cmluZz59IHJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgdG9rZW4sIG9yIHJlamVjdHMgd2l0aCBhbiBlcnJvclxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBjcmVhdGVCYW5rQWNjb3VudFRva2VuKHBhcmFtczogU3RyaXBlQmFua0FjY291bnRQYXJhbXMpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBWYWxpZGF0ZXMgYSBjcmVkaXQgY2FyZCBudW1iZXJcbiAgICogQHBhcmFtIGNhcmROdW1iZXIge3N0cmluZ30gQ3JlZGl0IGNhcmQgbnVtYmVyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gcmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyBpZiB0aGUgbnVtYmVyIGlzIHZhbGlkLCBhbmQgcmVqZWN0cyBpZiBpdCdzIGludmFsaWRcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgdmFsaWRhdGVDYXJkTnVtYmVyKGNhcmROdW1iZXI6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFZhbGlkYXRlcyBhIENWQyBudW1iZXJcbiAgICogQHBhcmFtIGN2YyB7c3RyaW5nfSBDVkMgbnVtYmVyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gcmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyBpZiB0aGUgbnVtYmVyIGlzIHZhbGlkLCBhbmQgcmVqZWN0cyBpZiBpdCdzIGludmFsaWRcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgdmFsaWRhdGVDVkMoY3ZjOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBWYWxpZGF0ZXMgYW4gZXhwaXJ5IGRhdGVcbiAgICogQHBhcmFtIGV4cE1vbnRoIHtzdHJpbmd9IGV4cGlyeSBtb250aCAoMCAtIDExKVxuICAgKiBAcGFyYW0gZXhwWWVhciB7c3RyaW5nfSBleHBpcnkgeWVhclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IHJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgaWYgdGhlIGRhdGUgaXMgdmFsaWQsIGFuZCByZWplY3RzIGlmIGl0J3MgaW52YWxpZFxuICAgKi9cbiAgQENvcmRvdmEoKVxuICB2YWxpZGF0ZUV4cGlyeURhdGUoZXhwTW9udGg6IHN0cmluZywgZXhwWWVhcjogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogR2V0IGEgY2FyZCB0eXBlIGZyb20gY2FyZCBudW1iZXJcbiAgICogQHBhcmFtIGNhcmROdW1iZXIge3N0cmluZ30gQ2FyZCBudW1iZXJcbiAgICogQHJldHVybiB7UHJvbWlzZTxzdHJpbmc+fSByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIGNyZWRpdCBjYXJkIHR5cGVcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgZ2V0Q2FyZFR5cGUoY2FyZE51bWJlcjogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICByZXR1cm47XG4gIH1cbn1cbiJdfQ==